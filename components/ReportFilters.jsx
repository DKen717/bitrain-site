import { useEffect, useState } from 'react'
import {
  Box, MenuItem, InputLabel, FormControl, Select, OutlinedInput,
  Chip, TextField, Button
} from '@mui/material'
import Autocomplete from '@mui/material/Autocomplete'
import { supabase } from '../src/supabaseClient'

export default function ReportFilters({ filters, setFilters, onSearch, onClear, loading }) {
  const [reportTimes, setReportTimes] = useState([])
  const [wagonNumbers, setWagonNumbers] = useState([])

  useEffect(() => {
    loadFilterOptions()
  }, [])

  const loadFilterOptions = async () => {
    try {
      const { data: timesRaw } = await supabase
        .from('Dislocation_daily2')
        .select('"–í—Ä–µ–º—è –æ—Ç—á–µ—Ç–∞"', { distinct: true })
        .not('–í—Ä–µ–º—è –æ—Ç—á–µ—Ç–∞', 'is', null)

      const { data: wagonsRaw } = await supabase
        .from('Dislocation_daily2')
        .select('"–ù–æ–º–µ—Ä –≤–∞–≥–æ–Ω–∞"', { distinct: true })
        .not('–ù–æ–º–µ—Ä –≤–∞–≥–æ–Ω–∞', 'is', null)

      const times = timesRaw.map(row => {
        const t = row['–í—Ä–µ–º—è –æ—Ç—á–µ—Ç–∞']
        if (!t) return null
        if (typeof t === 'string') return t.slice(0, 5)
        if (t instanceof Date) return t.toTimeString().slice(0, 5)
        return null
      }).filter(Boolean)

      const wagons = wagonsRaw
        .map(row => row['–ù–æ–º–µ—Ä –≤–∞–≥–æ–Ω–∞']?.toString())
        .filter(Boolean)

      setReportTimes(Array.from(new Set(times)))
      setWagonNumbers(Array.from(new Set(wagons)))
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤:', err)
    }
  }

  return (
    <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: '1rem', marginBottom: '1rem' }}>
      <TextField label="–î–∞—Ç–∞ –æ—Ç" type="date" value={filters.fromDate}
        onChange={(e) => setFilters(prev => ({ ...prev, fromDate: e.target.value }))}
        InputLabelProps={{ shrink: true }} sx={{ minWidth: 160 }} />

      <TextField label="–î–∞—Ç–∞ –¥–æ" type="date" value={filters.toDate}
        onChange={(e) => setFilters(prev => ({ ...prev, toDate: e.target.value }))}
        InputLabelProps={{ shrink: true }} sx={{ minWidth: 160 }} />

      <FormControl sx={{ minWidth: 200 }}>
        <InputLabel>–í—Ä–µ–º—è –æ—Ç—á–µ—Ç–∞</InputLabel>
        <Select multiple value={filters.selectedTimes}
          onChange={(e) => setFilters(prev => ({ ...prev, selectedTimes: e.target.value }))}
          input={<OutlinedInput label="–í—Ä–µ–º—è –æ—Ç—á–µ—Ç–∞" />}
          renderValue={(selected) => (
            <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>
              {selected.map((value) => (<Chip key={value} label={value} />))}
            </Box>)}>
          {reportTimes.map((time) => (
            <MenuItem key={time} value={time}>{time}</MenuItem>
          ))}
        </Select>
      </FormControl>

      <FormControl sx={{ minWidth: 200 }}>
        <InputLabel>–†–∞–±–æ—á–∏–π/–Ω–µ—Ä–∞–±–æ—á–∏–π</InputLabel>
        <Select value={filters.workingStatus}
          onChange={(e) => setFilters(prev => ({ ...prev, workingStatus: e.target.value }))}
          input={<OutlinedInput label="–†–∞–±–æ—á–∏–π/–Ω–µ—Ä–∞–±–æ—á–∏–π" />}>
          <MenuItem value="">–í—Å–µ</MenuItem>
          <MenuItem value="–†–∞–±–æ—á–∏–π">–†–∞–±–æ—á–∏–π</MenuItem>
          <MenuItem value="–ù–µ—Ä–∞–±–æ—á–∏–π">–ù–µ—Ä–∞–±–æ—á–∏–π</MenuItem>
        </Select>
      </FormControl>

      <Autocomplete multiple options={wagonNumbers} getOptionLabel={(opt) => opt.toString()}
        value={filters.selectedWagons}
        onChange={(event, newValue) => setFilters(prev => ({ ...prev, selectedWagons: newValue }))}
        filterSelectedOptions
        renderInput={(params) => (<TextField {...params} label="–ù–æ–º–µ—Ä–∞ –≤–∞–≥–æ–Ω–æ–≤" placeholder="–í–≤–æ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä" />)}
        sx={{ minWidth: 300 }} />

      <Button onClick={onSearch} variant="contained" color="primary" disabled={loading}>
        {loading ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : 'üîç –ü–æ–∏—Å–∫'}
      </Button>

      <Button onClick={onClear} variant="outlined" color="secondary">
        üßπ –û—á–∏—Å—Ç–∏—Ç—å
      </Button>
    </Box>
  )
}
