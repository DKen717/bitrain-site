import { useEffect, useState } from 'react'
import {
  Box, MenuItem, InputLabel, FormControl, Select, OutlinedInput,
  Chip, TextField, Button
} from '@mui/material'
import Autocomplete from '@mui/material/Autocomplete'
import { supabase } from '../src/supabaseClient'
import * as XLSX from 'xlsx'
import { saveAs } from 'file-saver'

export default function ReportFilters({ filters, setFilters, onSearch, onClear, loading, data }) {
  const [reportTimes, setReportTimes] = useState([])
  const [wagonNumbers, setWagonNumbers] = useState([])
  const [tenantOptions, setTenantOptions] = useState([])
  const [operationStations, setOperationStations] = useState([])
  const [departureStations, setDepartureStations] = useState([])
  const [destinationStations, setDestinationStations] = useState([])


    useEffect(() => {
      loadFilterOptions()
    }, [filters.fromDate, filters.toDate]) // –º–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∞—Ç—ã
    
    const loadFilterOptions = async () => {
      const params = {
        from_date: filters.fromDate,
        to_date: filters.toDate
      }
    
      try {
        // üîπ –í—Ä–µ–º—è –æ—Ç—á–µ—Ç–∞
        const { data: timesRaw, error: timeErr } = await supabase.rpc('get_unique_times', params)
        
        // üîπ –ù–æ–º–µ—Ä–∞ –≤–∞–≥–æ–Ω–æ–≤
        const { data: wagonsRaw, error: wagonErr } = await supabase.rpc('get_unique_wagons', params)
        
        // üîπ –ê—Ä–µ–Ω–¥–∞—Ç–æ—Ä—ã
        const { data: tenantsRaw, error: tenantErr } = await supabase.rpc('get_unique_tenants', params)
        
        // üîπ –°—Ç–∞–Ω—Ü–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏
        const { data: opsRaw, error: opsErr } = await supabase.rpc('get_unique_operation_stations', params)
    
        // üîπ –°—Ç–∞–Ω—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        const { data: depRaw, error: depErr } = await supabase.rpc('get_unique_departure_stations', params)
    
        // üîπ –°—Ç–∞–Ω—Ü–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
        const { data: destRaw, error: destErr } = await supabase.rpc('get_unique_destination_stations', params)
    
        if (timeErr || wagonErr || tenantErr || opsErr || depErr || destErr) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤:', timeErr || wagonErr || tenantErr || opsErr || depErr || destErr)
          return
        }
    
        // üß† –õ–æ–≥ —Å—ã—Ä–æ–≥–æ –≤—ã–≤–æ–¥–∞
        console.log('üì¶ –í—Ä–µ–º—è –æ—Ç—á–µ—Ç–∞ (—É–Ω–∏–∫–∞–ª—å–Ω—ã–µ):', timesRaw)
        console.log('üì¶ –ù–æ–º–µ—Ä–∞ –≤–∞–≥–æ–Ω–æ–≤ (—É–Ω–∏–∫–∞–ª—å–Ω—ã–µ):', wagonsRaw)
    
        // ‚è± –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ HH:mm
        const times = (timesRaw || [])
          .map(row => {
            const t = row['–í—Ä–µ–º—è –æ—Ç—á–µ—Ç–∞']
            return typeof t === 'string' ? t.slice(0, 5) : null
          })
          .filter(Boolean)
          .sort((a, b) => a.localeCompare(b))
    
        // üöÉ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤–∞–≥–æ–Ω–æ–≤ –≤ —Å—Ç—Ä–æ–∫—É + —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
        const wagons = (wagonsRaw || [])
          .map(row => row['–ù–æ–º–µ—Ä –≤–∞–≥–æ–Ω–∞']?.toString())
          .filter(Boolean)
          .sort((a, b) => Number(a) - Number(b))
        
        const tenants = Array.from(new Set(
            tenantsRaw.map(row => row['–ê—Ä–µ–Ω–¥–∞—Ç–æ—Ä']?.toString()).filter(Boolean)
          )).sort()

        const opStations = opsRaw.map(r => r['–°—Ç–∞–Ω—Ü–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏']).filter(Boolean).sort()
        const depStations = depRaw.map(r => r['–°—Ç–∞–Ω—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è']).filter(Boolean).sort()
        const destStations = destRaw.map(r => r['–°—Ç–∞–Ω—Ü–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è']).filter(Boolean).sort()
    
        // üîç –ò—Ç–æ–≥
        console.log('‚úÖ –ì–æ—Ç–æ–≤—ã–µ –≤—Ä–µ–º–µ–Ω–∞:', times)
        console.log('‚úÖ –ì–æ—Ç–æ–≤—ã–µ –≤–∞–≥–æ–Ω—ã:', wagons)
    
        setReportTimes(times)
        setWagonNumbers(wagons)
        setTenantOptions(tenants)
        setOperationStations(opStations)
        setDepartureStations(depStations)
        setDestinationStations(destStations)
      } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è loadFilterOptions:', err)
      }
    }


    const fetchAllDataForExport = async () => {
    let query = supabase
      .from('Dislocation_daily2')
      .select(`
        "–ù–æ–º–µ—Ä –≤–∞–≥–æ–Ω–∞",
        "–î–∞—Ç–∞ —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏",
        "–î–∞—Ç–∞ –æ—Ç—á–µ—Ç–∞",
        "–í—Ä–µ–º—è –æ—Ç—á–µ—Ç–∞",
        "–°—Ç–∞–Ω—Ü–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏",
        "–°—Ç–∞–Ω—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è",
        "–°—Ç–∞–Ω—Ü–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è",
        "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏",
        "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –≥—Ä—É–∑–∞",
        "–¢–∏–ø –≤–∞–≥–æ–Ω–∞",
        "–ü–æ—Ä–æ–∂–Ω–∏–π/–≥—Ä—É–∂–µ–Ω–Ω—ã–π",
        "–†–∞–±–æ—á–∏–π/–Ω–µ—Ä–∞–±–æ—á–∏–π",
        "–î–Ω–µ–π –±–µ–∑ –æ–ø–µ—Ä–∞—Ü–∏–∏",
        "–ü—Ä–æ—Å—Ç–æ–π –Ω–∞ —Å—Ç–∞–Ω—Ü–∏–∏",
        "–ê—Ä–µ–Ω–¥–∞—Ç–æ—Ä"
      `)
  
    if (filters.fromDate) query = query.gte('–î–∞—Ç–∞ –æ—Ç—á–µ—Ç–∞', filters.fromDate)
    if (filters.toDate) query = query.lte('–î–∞—Ç–∞ –æ—Ç—á–µ—Ç–∞', filters.toDate)
    if (filters.selectedTimes.length > 0) query = query.in('–í—Ä–µ–º—è –æ—Ç—á–µ—Ç–∞', filters.selectedTimes)
    if (filters.selectedWagons.length > 0) query = query.in('–ù–æ–º–µ—Ä –≤–∞–≥–æ–Ω–∞', filters.selectedWagons)
    if (filters.selectedTenants.length > 0) query = query.in('–ê—Ä–µ–Ω–¥–∞—Ç–æ—Ä', filters.selectedTenants)
    if (filters.workingStatus) query = query.eq('–†–∞–±–æ—á–∏–π/–Ω–µ—Ä–∞–±–æ—á–∏–π', filters.workingStatus)
    if (filters.loadStatus) query = query.eq('–ü–æ—Ä–æ–∂–Ω–∏–π/–≥—Ä—É–∂–µ–Ω–Ω—ã–π', filters.loadStatus)
    if (filters.minIdleDays) query = query.gte('–î–Ω–µ–π –±–µ–∑ –æ–ø–µ—Ä–∞—Ü–∏–∏', filters.minIdleDays)
    if (filters.maxIdleDays) query = query.lte('–î–Ω–µ–π –±–µ–∑ –æ–ø–µ—Ä–∞—Ü–∏–∏', filters.maxIdleDays)
    if (filters.selectedOperationStations.length > 0) query = query.in('–°—Ç–∞–Ω—Ü–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏', filters.selectedOperationStations)
    if (filters.selectedDepartureStations.length > 0) query = query.in('–°—Ç–∞–Ω—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è', filters.selectedDepartureStations)
    if (filters.selectedDestinationStations.length > 0) query = query.in('–°—Ç–∞–Ω—Ü–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è', filters.selectedDestinationStations)
  
    const { data, error } = await query
    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö:', error)
      return []
    }
  
    return data
  }


  const handleExport = async () => {
    const fullData = await fetchAllDataForExport()
    if (!fullData || fullData.length === 0) return
  
    const worksheet = XLSX.utils.json_to_sheet(fullData)
    const workbook = XLSX.utils.book_new()
    XLSX.utils.book_append_sheet(workbook, worksheet, '–û—Ç—á–µ—Ç')
  
    const excelBuffer = XLSX.write(workbook, { bookType: 'xlsx', type: 'array' })
    const blob = new Blob([excelBuffer], { type: 'application/octet-stream' })
  
    saveAs(blob, `–û—Ç—á–µ—Ç_${new Date().toISOString().slice(0, 10)}.xlsx`)
  }



  return (
    <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: '1rem', marginBottom: '1rem' }}>
      <TextField label="–î–∞—Ç–∞ –æ—Ç" type="date" value={filters.fromDate}
        onChange={(e) => setFilters(prev => ({ ...prev, fromDate: e.target.value }))}
        InputLabelProps={{ shrink: true }} size="small" sx={{ minWidth: 160 }} />

      <TextField label="–î–∞—Ç–∞ –¥–æ" type="date" value={filters.toDate}
        onChange={(e) => setFilters(prev => ({ ...prev, toDate: e.target.value }))}
        InputLabelProps={{ shrink: true }} size="small" sx={{ minWidth: 160 }} />


      <FormControl size="small" sx={{ minWidth: 200 }}>
        <InputLabel>–í—Ä–µ–º—è –æ—Ç—á–µ—Ç–∞</InputLabel>
        <Select multiple value={filters.selectedTimes}
          onChange={(e) => setFilters(prev => ({ ...prev, selectedTimes: e.target.value }))}
          input={<OutlinedInput label="–í—Ä–µ–º—è –æ—Ç—á–µ—Ç–∞" />}
          renderValue={(selected) => (
            <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>
              {selected.map((value) => (<Chip key={value} label={value} />))}
            </Box>)}>
          {reportTimes.map((time) => (
            <MenuItem key={time} value={time}>{time}</MenuItem>
          ))}
        </Select>
      </FormControl>

      <FormControl size="small" sx={{ minWidth: 200 }}>
        <InputLabel>–†–∞–±–æ—á–∏–π/–Ω–µ—Ä–∞–±–æ—á–∏–π</InputLabel>
        <Select value={filters.workingStatus}
          onChange={(e) => setFilters(prev => ({ ...prev, workingStatus: e.target.value }))}
          input={<OutlinedInput label="–†–∞–±–æ—á–∏–π/–Ω–µ—Ä–∞–±–æ—á–∏–π" />}>
          <MenuItem value="">–í—Å–µ</MenuItem>
          <MenuItem value="–†–∞–±–æ—á–∏–π">–†–∞–±–æ—á–∏–π</MenuItem>
          <MenuItem value="–ù–µ—Ä–∞–±–æ—á–∏–π">–ù–µ—Ä–∞–±–æ—á–∏–π</MenuItem>
        </Select>
      </FormControl>

      <FormControl size="small" sx={{ minWidth: 200 }}>
          <InputLabel>–ü–æ—Ä–æ–∂–Ω–∏–π/–≥—Ä—É–∂–µ–Ω–Ω—ã–π</InputLabel>
          <Select value={filters.loadStatus}
            onChange={(e) => setFilters(prev => ({ ...prev, loadStatus: e.target.value }))}
            input={<OutlinedInput label="–ü–æ—Ä–æ–∂–Ω–∏–π/–≥—Ä—É–∂–µ–Ω–Ω—ã–π" />}>
            <MenuItem value="">–í—Å–µ</MenuItem>
            <MenuItem value="–ü–æ—Ä–æ–∂–Ω–∏–π">–ü–æ—Ä–æ–∂–Ω–∏–π</MenuItem>
            <MenuItem value="–ì—Ä—É–∂–µ–Ω–Ω—ã–π">–ì—Ä—É–∂–µ–Ω–Ω—ã–π</MenuItem>
          </Select>
        </FormControl>



      <Autocomplete multiple options={wagonNumbers} getOptionLabel={(opt) => opt.toString()}
        value={filters.selectedWagons}
        onChange={(event, newValue) => setFilters(prev => ({ ...prev, selectedWagons: newValue }))}
        filterSelectedOptions
        renderInput={(params) => (<TextField {...params} label="–ù–æ–º–µ—Ä–∞ –≤–∞–≥–æ–Ω–æ–≤" placeholder="–í–≤–æ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä" />)}
        size="small" sx={{ minWidth: 300 }} />

      <Autocomplete multiple options={tenantOptions} 
        value={filters.selectedTenants}
        onChange={(e, newValue) => setFilters(prev => ({ ...prev, selectedTenants: newValue })) }
        filterSelectedOptions
        renderInput={(params) => (<TextField {...params} label="–ê—Ä–µ–Ω–¥–∞—Ç–æ—Ä" placeholder="–í–≤–µ–¥–∏—Ç–µ" size="small" />)}
        sx={{ minWidth: 250 }} />

      <Autocomplete multiple options={operationStations}
        value={filters.selectedOperationStations}
        onChange={(e, newValue) => setFilters(prev => ({ ...prev, selectedOperationStations: newValue }))}
        filterSelectedOptions
        renderInput={(params) => <TextField {...params} label="–°—Ç–∞–Ω—Ü–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏" placeholder="–í–≤–µ–¥–∏—Ç–µ" size="small" />}
        sx={{ minWidth: 250 }}
      />
      
      <Autocomplete multiple options={departureStations}
        value={filters.selectedDepartureStations}
        onChange={(e, newValue) => setFilters(prev => ({ ...prev, selectedDepartureStations: newValue }))}
        filterSelectedOptions
        renderInput={(params) => <TextField {...params} label="–°—Ç–∞–Ω—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è" placeholder="–í–≤–µ–¥–∏—Ç–µ" size="small" />}
        sx={{ minWidth: 250 }}
      />
      
      <Autocomplete multiple options={destinationStations}
        value={filters.selectedDestinationStations}
        onChange={(e, newValue) => setFilters(prev => ({ ...prev, selectedDestinationStations: newValue }))}
        filterSelectedOptions
        renderInput={(params) => <TextField {...params} label="–°—Ç–∞–Ω—Ü–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è" placeholder="–í–≤–µ–¥–∏—Ç–µ" size="small" />}
        sx={{ minWidth: 250 }}
      />

      <TextField type="number" label="–î–Ω–µ–π –±–µ–∑ –æ–ø–µ—Ä–∞—Ü–∏–∏: –æ—Ç" value={filters.minIdleDays}
        onChange={(e) => setFilters(prev => ({ ...prev, minIdleDays: e.target.value }))}
        size="small" sx={{fontSize: '0.55rem', minWidth: 160 }} />
      
      <TextField type="number" label="–î–Ω–µ–π –±–µ–∑ –æ–ø–µ—Ä–∞—Ü–∏–∏: –¥–æ" value={filters.maxIdleDays}
        onChange={(e) => setFilters(prev => ({ ...prev, maxIdleDays: e.target.value }))}
        size="small" sx={{fontSize: '0.55rem', minWidth: 160 }} />

      <TextField type="number" label="–ü—Ä–æ—Å—Ç–æ–π –Ω–∞ —Å—Ç–∞–Ω—Ü–∏–∏: –æ—Ç" value={filters.minDwellDays}
        onChange={(e) => setFilters(prev => ({ ...prev, minDwellDays: e.target.value }))} 
        size="small" sx={{ minWidth: 160 }} />
      
      <TextField type="number" label="–ü—Ä–æ—Å—Ç–æ–π –Ω–∞ —Å—Ç–∞–Ω—Ü–∏–∏: –¥–æ" value={filters.maxDwellDays}
        onChange={(e) => setFilters(prev => ({ ...prev, maxDwellDays: e.target.value }))}
        size="small" sx={{ minWidth: 160 }} />


      <Button onClick={onSearch} variant="contained" color="primary" disabled={loading}>
        {loading ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : 'üîç –ü–æ–∏—Å–∫'}
      </Button>

      <Button onClick={onClear} variant="outlined" color="secondary">
        üßπ –û—á–∏—Å—Ç–∏—Ç—å
      </Button>

      <Button variant="outlined" onClick={handleExport} disabled={loading || data.length === 0}>
      üì§ –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel
      </Button>
      
    </Box>
  )
}
