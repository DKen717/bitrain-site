import { useEffect, useState } from 'react'
import {
  Box, MenuItem, InputLabel, FormControl, Select, OutlinedInput,
  Chip, TextField, Button
} from '@mui/material'
import Autocomplete from '@mui/material/Autocomplete'
import { supabase } from '../src/supabaseClient'

export default function ReportFilters({ filters, setFilters, onSearch, onClear, loading }) {
  const [reportTimes, setReportTimes] = useState([])
  const [wagonNumbers, setWagonNumbers] = useState([])

  useEffect(() => {
    loadFilterOptions()
  }, [])

          const loadFilterOptions = async () => {
      try {
        // üîπ –í—Ä–µ–º—è –æ—Ç—á–µ—Ç–∞
        const { data: timesRaw, error: timeErr } = await supabase.rpc('get_unique_times')
        // üîπ –ù–æ–º–µ—Ä–∞ –≤–∞–≥–æ–Ω–æ–≤
        const { data: wagonsRaw, error: wagonErr } = await supabase.rpc('get_unique_wagons')
        // üì• –ó–∞–≥—Ä—É–∑–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–æ–≤
        const { data: tenantsRaw, error: tenantErr } = await supabase.rpc('get_unique_tenants')
        
        if (tenantErr) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–æ–≤:', tenantErr)
          return
        }
        if (timeErr || wagonErr) {
          console.error('‚ùå Supabase –æ—à–∏–±–∫–∞:', timeErr || wagonErr)
          return
        }
    
        // üß† –õ–æ–≥ —Å—ã—Ä–æ–≥–æ –≤—ã–≤–æ–¥–∞
        console.log('üì¶ –í—Ä–µ–º—è –æ—Ç—á–µ—Ç–∞ (—É–Ω–∏–∫–∞–ª—å–Ω—ã–µ):', timesRaw)
        console.log('üì¶ –ù–æ–º–µ—Ä–∞ –≤–∞–≥–æ–Ω–æ–≤ (—É–Ω–∏–∫–∞–ª—å–Ω—ã–µ):', wagonsRaw)
    
        // ‚è± –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ HH:mm
        const times = (timesRaw || [])
          .map(row => {
            const t = row['–í—Ä–µ–º—è –æ—Ç—á–µ—Ç–∞']
            return typeof t === 'string' ? t.slice(0, 5) : null
          })
          .filter(Boolean)
          .sort((a, b) => a.localeCompare(b))
    
        // üöÉ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤–∞–≥–æ–Ω–æ–≤ –≤ —Å—Ç—Ä–æ–∫—É + —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
        const wagons = (wagonsRaw || [])
          .map(row => row['–ù–æ–º–µ—Ä –≤–∞–≥–æ–Ω–∞']?.toString())
          .filter(Boolean)
          .sort((a, b) => Number(a) - Number(b))
        
        const tenants = Array.from(new Set(
            tenantsRaw.map(row => row['–ê—Ä–µ–Ω–¥–∞—Ç–æ—Ä']?.toString()).filter(Boolean)
          )).sort()
    
        // üîç –ò—Ç–æ–≥
        console.log('‚úÖ –ì–æ—Ç–æ–≤—ã–µ –≤—Ä–µ–º–µ–Ω–∞:', times)
        console.log('‚úÖ –ì–æ—Ç–æ–≤—ã–µ –≤–∞–≥–æ–Ω—ã:', wagons)
    
        setReportTimes(times)
        setWagonNumbers(wagons)
        setTenantOptions(tenants)
      } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è loadFilterOptions:', err)
      }
    }


  return (
    <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: '1rem', marginBottom: '1rem' }}>
      <TextField label="–î–∞—Ç–∞ –æ—Ç" type="date" value={filters.fromDate}
        onChange={(e) => setFilters(prev => ({ ...prev, fromDate: e.target.value }))}
        InputLabelProps={{ shrink: true }} size="small" sx={{ minWidth: 160 }} />

      <TextField label="–î–∞—Ç–∞ –¥–æ" type="date" value={filters.toDate}
        onChange={(e) => setFilters(prev => ({ ...prev, toDate: e.target.value }))}
        InputLabelProps={{ shrink: true }} size="small" sx={{ minWidth: 160 }} />


      <FormControl size="small" sx={{ minWidth: 200 }}>
        <InputLabel>–í—Ä–µ–º—è –æ—Ç—á–µ—Ç–∞</InputLabel>
        <Select multiple value={filters.selectedTimes}
          onChange={(e) => setFilters(prev => ({ ...prev, selectedTimes: e.target.value }))}
          input={<OutlinedInput label="–í—Ä–µ–º—è –æ—Ç—á–µ—Ç–∞" />}
          renderValue={(selected) => (
            <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>
              {selected.map((value) => (<Chip key={value} label={value} />))}
            </Box>)}>
          {reportTimes.map((time) => (
            <MenuItem key={time} value={time}>{time}</MenuItem>
          ))}
        </Select>
      </FormControl>

      <FormControl size="small" sx={{ minWidth: 200 }}>
        <InputLabel>–†–∞–±–æ—á–∏–π/–Ω–µ—Ä–∞–±–æ—á–∏–π</InputLabel>
        <Select value={filters.workingStatus}
          onChange={(e) => setFilters(prev => ({ ...prev, workingStatus: e.target.value }))}
          input={<OutlinedInput label="–†–∞–±–æ—á–∏–π/–Ω–µ—Ä–∞–±–æ—á–∏–π" />}>
          <MenuItem value="">–í—Å–µ</MenuItem>
          <MenuItem value="–†–∞–±–æ—á–∏–π">–†–∞–±–æ—á–∏–π</MenuItem>
          <MenuItem value="–ù–µ—Ä–∞–±–æ—á–∏–π">–ù–µ—Ä–∞–±–æ—á–∏–π</MenuItem>
        </Select>
      </FormControl>



      <Autocomplete multiple options={wagonNumbers} getOptionLabel={(opt) => opt.toString()}
        value={filters.selectedWagons}
        onChange={(event, newValue) => setFilters(prev => ({ ...prev, selectedWagons: newValue }))}
        filterSelectedOptions
        renderInput={(params) => (<TextField {...params} label="–ù–æ–º–µ—Ä–∞ –≤–∞–≥–æ–Ω–æ–≤" placeholder="–í–≤–æ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä" />)}
        size="small" sx={{ minWidth: 300 }} />

      <Autocomplete multiple options={tenantOptions} 
        value={filters.selectedTenants}
        onChange={(e, newValue) => setFilters(prev => ({ ...prev, selectedTenants: newValue })) }
        filterSelectedOptions
        renderInput={(params) => (<TextField {...params} label="–ê—Ä–µ–Ω–¥–∞—Ç–æ—Ä" placeholder="–í–≤–µ–¥–∏—Ç–µ" size="small" />)}
        sx={{ minWidth: 250 }} />

      <TextField type="number" label="–î–Ω–µ–π –±–µ–∑ –æ–ø–µ—Ä–∞—Ü–∏–∏: –æ—Ç" value={filters.minIdleDays}
        onChange={(e) => setFilters(prev => ({ ...prev, minIdleDays: e.target.value }))}
        size="small" sx={{fontSize: '0.55rem', minWidth: 160 }} />
      
      <TextField type="number" label="–î–Ω–µ–π –±–µ–∑ –æ–ø–µ—Ä–∞—Ü–∏–∏: –¥–æ" value={filters.maxIdleDays}
        onChange={(e) => setFilters(prev => ({ ...prev, maxIdleDays: e.target.value }))}
        size="small" sx={{fontSize: '0.55rem', minWidth: 160 }} />

      <Button onClick={onSearch} variant="contained" color="primary" disabled={loading}>
        {loading ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : 'üîç –ü–æ–∏—Å–∫'}
      </Button>

      <Button onClick={onClear} variant="outlined" color="secondary">
        üßπ –û—á–∏—Å—Ç–∏—Ç—å
      </Button>
    </Box>
  )
}
