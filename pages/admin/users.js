// pages/admin/users.js
import { useEffect, useState } from 'react'
import {
  Box, Typography, Button, TextField, Select, MenuItem, FormControl,
  InputLabel, Table, TableHead, TableBody, TableCell, TableRow, Paper
} from '@mui/material'
import { supabase } from '../../src/supabaseClient'
import TopNav from '../../components/TopNav'
import dayjs from 'dayjs'

export default function AdminUsers() {
  const [users, setUsers] = useState([])
  const [companies, setCompanies] = useState([])
  const [newUser, setNewUser] = useState({ email: '', password: '', role: 'user', company_id: '' })

  useEffect(() => {
    loadUsers()
    loadCompanies()
  }, [])

  const loadUsers = async () => {
    const { data, error } = await supabase.from('users_custom').select('*')
    if (!error) {
      console.log('‚úÖ Users loaded:', data)
      setUsers(data)
    } else {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error)
    }
    if (!error && Array.isArray(data)) {
      setUsers(data)
    } else {
      console.error('–û—à–∏–±–∫–∞ –∏–ª–∏ –Ω–µ –º–∞—Å—Å–∏–≤:', error, data)
    }    
  }

  const loadCompanies = async () => {
    const { data, error } = await supabase.from('companies').select('id, name')
    if (!error) {
      console.log('‚úÖ Companies loaded:', data)
      setCompanies(data)
    } else {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–ø–∞–Ω–∏–π:', error)
    }
  }


  const getCompanyName = (companyId) => {
  const company = companies.find(c => c.id === companyId)
  if (!company) {
    console.warn('‚ö†Ô∏è –ö–æ–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ ID:', companyId)
    return '-'
  }
  return company ? company.name : '‚Äî'
}


  const handleAddUser = async () => {
    const { email, password, role, company_id } = newUser

    if (!email || !password || !role || !company_id) {
      alert('‚ö†Ô∏è –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è')
      return
    }

    const { error } = await supabase.from('users_custom').insert([
      { email, password, role, company_id }
    ])

    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error.message)
      alert('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ' + error.message)
    } else {
      setNewUser({ email: '', password: '', role: 'user', company_id: '' })
      loadUsers()
    }
  }

  console.log('üë§ Users:', users)

  return (
    <>
      <TopNav />
      <Box sx={{ padding: '2rem' }}>
        <Typography variant="h5" gutterBottom>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏</Typography>

        {/* üì• –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */}
        <Paper sx={{ padding: 2, marginBottom: 3 }}>
          <Typography variant="subtitle1">–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</Typography>
          <Box sx={{ display: 'flex', gap: 2, flexWrap: 'wrap', marginTop: 2 }}>
            <TextField label="Email" value={newUser.email}
              onChange={e => setNewUser({ ...newUser, email: e.target.value })} />
            <TextField label="–ü–∞—Ä–æ–ª—å" type="password" value={newUser.password}
              onChange={e => setNewUser({ ...newUser, password: e.target.value })} />
            <FormControl sx={{ minWidth: 160 }}>
              <InputLabel>–†–æ–ª—å</InputLabel>
              <Select
                value={newUser.role}
                onChange={e => setNewUser({ ...newUser, role: e.target.value })}
                label="–†–æ–ª—å"
              >
                <MenuItem value="user">–û–±—ã—á–Ω—ã–π</MenuItem>
                <MenuItem value="companyadmin">–ê–¥–º–∏–Ω –∫–æ–º–ø–∞–Ω–∏–∏</MenuItem>
                <MenuItem value="superadmin">–°—É–ø–µ—Ä-–∞–¥–º–∏–Ω</MenuItem>
              </Select>
            </FormControl>
            <FormControl sx={{ minWidth: 160 }}>
              <InputLabel>–ö–æ–º–ø–∞–Ω–∏—è</InputLabel>
              <Select
                value={newUser.company_id}
                onChange={e => setNewUser({ ...newUser, company_id: e.target.value })}
                label="–ö–æ–º–ø–∞–Ω–∏—è"
              >
                <MenuItem value="">‚Äî</MenuItem>
                {companies.map(c => (
                  <MenuItem key={c.id} value={c.id}>{c.name}</MenuItem>
                ))}
              </Select>
            </FormControl>
            <Button variant="contained" onClick={handleAddUser}>‚ûï –î–æ–±–∞–≤–∏—Ç—å</Button>
          </Box>
        </Paper>

        {/* üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π */}
        <Typography variant="subtitle1">–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</Typography>
        <Table component={Paper}>
          <TableHead>
            <TableRow>
              <TableCell>Email</TableCell>
              <TableCell>–†–æ–ª—å</TableCell>
              <TableCell>–ö–æ–º–ø–∞–Ω–∏—è</TableCell>
              <TableCell>–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è</TableCell>
            </TableRow>
          </TableHead>
          <TableBody>
            {(users || []).map((u, i) => (
              <TableRow key={u.id || i}>
                <TableCell>{u.email || '‚Äî'}</TableCell>
                <TableCell>{u.role || '‚Äî'}</TableCell>
                <TableCell>{getCompanyName(u.company_id)}</TableCell>
                <TableCell>
                  {u.created_at
                    ? dayjs(u.created_at).format('YYYY-MM-DD HH:mm')
                    : '‚Äî'}
                </TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </Box>
    </>
  )
}
