// pages/api/createUser.js
import { supabaseAdmin } from '../../src/supabaseServer'

export default async function handler(req, res) {
  if (req.method !== 'POST') return res.status(405).end()

  const { email, password, role, company_id } = req.body
  if (!email || !password || !role || !company_id) {
    return res.status(400).json({ error: '–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' })
  }

  // üîç –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ Auth
  const { data: existingUsers, error: lookupError } = await supabaseAdmin.auth.admin.listUsers({
    page: 1,
    perPage: 1000
  })

  if (lookupError) {
    return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π' })
  }

  const existingUser = existingUsers.users.find(u => u.email === email)

  let userId

  if (existingUser) {
    userId = existingUser.id
  } else {
    // üÜï –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Supabase Auth
    const { data, error: createError } = await supabaseAdmin.auth.admin.createUser({
      email,
      password,
      email_confirm: true
    })

    if (createError) {
      return res.status(400).json({ error: createError.message })
    }

    userId = data.user.id
  }

  // üóÉ –ü—Ä–æ–≤–µ—Ä—è–µ–º: –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å –≤ users_custom
  const { data: userMeta } = await supabaseAdmin
    .from('users_custom')
    .select('id')
    .eq('email', email)
    .single()

  if (!userMeta) {
    const { error: insertError } = await supabaseAdmin.from('users_custom').insert([
      { user_id: userId, email, role, company_id, created_at: new Date().toISOString() }
    ])

    if (insertError) {
      return res.status(400).json({ error: insertError.message })
    }
  }

  return res.status(200).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω' })
}
