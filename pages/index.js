import { useEffect, useState } from 'react'
import { supabase } from '../src/supabaseClient'

export default function Home() {
  const [data, setData] = useState([])
  const [fromDate, setFromDate] = useState('')
  const [toDate, setToDate] = useState('')
  const [reportTime, setReportTime] = useState('')
  const [wagonNumbers, setWagonNumbers] = useState('')
  const [page, setPage] = useState(1)
  const [trigger, setTrigger] = useState(0)
  const [total, setTotal] = useState(0)
  const [isInitialLoad, setIsInitialLoad] = useState(true)

  const pageSize = 20

  useEffect(() => {
    fetchData()
  }, [trigger, page])

  async function fetchData() {
    let base = supabase
      .from('Dislocation_daily2')
      .select(`
        "–ù–æ–º–µ—Ä –≤–∞–≥–æ–Ω–∞",
        "–î–∞—Ç–∞ —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏",
        "–î–∞—Ç–∞ –æ—Ç—á–µ—Ç–∞",
        "–í—Ä–µ–º—è –æ—Ç—á–µ—Ç–∞",
        "–°—Ç–∞–Ω—Ü–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏",
        "–°—Ç–∞–Ω—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è",
        "–°—Ç–∞–Ω—Ü–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è"
      `, { count: 'exact' })
      .order('–î–∞—Ç–∞ –æ—Ç—á–µ—Ç–∞', { ascending: false })
      .order('–í—Ä–µ–º—è –æ—Ç—á–µ—Ç–∞', { ascending: false })

    // –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ ‚Äî —Ç–æ–ª—å–∫–æ —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ
    if (isInitialLoad) {
      const { data: latest, error: err1 } = await supabase
        .from('Dislocation_daily2')
        .select('"–î–∞—Ç–∞ –æ—Ç—á–µ—Ç–∞", "–í—Ä–µ–º—è –æ—Ç—á–µ—Ç–∞"')
        .order('–î–∞—Ç–∞ –æ—Ç—á–µ—Ç–∞', { ascending: false })
        .order('–í—Ä–µ–º—è –æ—Ç—á–µ—Ç–∞', { ascending: false })
        .limit(1)

      if (latest && latest.length > 0) {
        const latestDate = latest[0]['–î–∞—Ç–∞ –æ—Ç—á–µ—Ç–∞']
        const latestTime = latest[0]['–í—Ä–µ–º—è –æ—Ç—á–µ—Ç–∞']
        setFromDate(latestDate)
        setToDate(latestDate)
        setReportTime(latestTime)
        setIsInitialLoad(false)

        base = base
          .eq('–î–∞—Ç–∞ –æ—Ç—á–µ—Ç–∞', latestDate)
          .eq('–í—Ä–µ–º—è –æ—Ç—á–µ—Ç–∞', latestTime)
      }
    } else {
      if (fromDate) base = base.gte('–î–∞—Ç–∞ –æ—Ç—á–µ—Ç–∞', fromDate)
      if (toDate) base = base.lte('–î–∞—Ç–∞ –æ—Ç—á–µ—Ç–∞', toDate)
      if (reportTime) base = base.eq('–í—Ä–µ–º—è –æ—Ç—á–µ—Ç–∞', reportTime)

      const numbers = wagonNumbers
        .split(',')
        .map((n) => n.trim())
        .filter((n) => n.length > 0)

      if (numbers.length === 1) {
        base = base.eq('–ù–æ–º–µ—Ä –≤–∞–≥–æ–Ω–∞', numbers[0])
      } else if (numbers.length > 1) {
        base = base.in('–ù–æ–º–µ—Ä –≤–∞–≥–æ–Ω–∞', numbers)
      }
    }

    const from = (page - 1) * pageSize
    const to = from + pageSize - 1

    base = base.range(from, to)

    const { data, count, error } = await base

    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', error.message)
    } else {
      setData(data)
      setTotal(count || 0)
    }
  }

  function clearFilters() {
    setFromDate('')
    setToDate('')
    setReportTime('')
    setWagonNumbers('')
    setPage(1)
    setData([])
    setTotal(0)
    setTrigger((prev) => prev + 1)
  }

  function triggerSearch() {
    setIsInitialLoad(false)
    setPage(1)
    setTrigger((prev) => prev + 1)
  }

  return (
    <div style={{ padding: '2rem', fontFamily: 'Arial, sans-serif' }}>
      <h1>Aiway Logistic ‚Äî –æ—Ç—á—ë—Ç –ø–æ –≤–∞–≥–æ–Ω–∞–º</h1>

      <div style={{ marginBottom: '1rem' }}>
        <label style={{ marginRight: '1rem' }}>
          üìÖ –û—Ç:
          <input
            type="date"
            value={fromDate}
            onChange={(e) => setFromDate(e.target.value)}
            style={{ marginLeft: '0.5rem' }}
          />
        </label>

        <label style={{ marginRight: '1rem' }}>
          –î–æ:
          <input
            type="date"
            value={toDate}
            onChange={(e) => setToDate(e.target.value)}
            style={{ marginLeft: '0.5rem' }}
          />
        </label>

        <label style={{ marginRight: '1rem' }}>
          üïí –í—Ä–µ–º—è –æ—Ç—á–µ—Ç–∞:
          <input
            type="time"
            value={reportTime}
            onChange={(e) => setReportTime(e.target.value)}
            style={{ marginLeft: '0.5rem' }}
          />
        </label>

        <label>
          üöÉ –ù–æ–º–µ—Ä–∞ –≤–∞–≥–æ–Ω–æ–≤:
          <input
            type="text"
            placeholder="–Ω–∞–ø—Ä: 9301, 9714"
            value={wagonNumbers}
            onChange={(e) => setWagonNumbers(e.target.value)}
            style={{ marginLeft: '0.5rem', width: '200px' }}
          />
        </label>

        <button onClick={triggerSearch} style={{ marginLeft: '1rem' }}>üîç –ù–∞–π—Ç–∏</button>
        <button onClick={clearFilters} style={{ marginLeft: '0.5rem' }}>üßπ –û—á–∏—Å—Ç–∏—Ç—å</button>
      </div>

      <table border="1" cellPadding="8" style={{ width: '100%', borderCollapse: 'collapse' }}>
        <thead style={{ backgroundColor: '#f0f0f0' }}>
          <tr>
            <th>‚Ññ</th>
            <th>–î–∞—Ç–∞ –æ—Ç—á–µ—Ç–∞</th>
            <th>–í—Ä–µ–º—è</th>
            <th>–ù–æ–º–µ—Ä –≤–∞–≥–æ–Ω–∞</th>
            <th>–î–∞—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏</th>
            <th>–°—Ç–∞–Ω—Ü–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏</th>
            <th>–°—Ç–∞–Ω—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è</th>
            <th>–°—Ç–∞–Ω—Ü–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è</th>
          </tr>
        </thead>
        <tbody>
          {data.length === 0 ? (
            <tr>
              <td colSpan="8" style={{ textAlign: 'center' }}>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö</td>
            </tr>
          ) : (
            data.map((row, idx) => (
              <tr key={idx}>
                <td>{(page - 1) * pageSize + idx + 1}</td>
                <td>{row['–î–∞—Ç–∞ –æ—Ç—á–µ—Ç–∞']}</td>
                <td>{row['–í—Ä–µ–º—è –æ—Ç—á–µ—Ç–∞']}</td>
                <td>{row['–ù–æ–º–µ—Ä –≤–∞–≥–æ–Ω–∞']}</td>
                <td>{row['–î–∞—Ç–∞ —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏']}</td>
                <td>{row['–°—Ç–∞–Ω—Ü–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏']}</td>
                <td>{row['–°—Ç–∞–Ω—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è']}</td>
                <td>{row['–°—Ç–∞–Ω—Ü–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è']}</td>
              </tr>
            ))
          )}
        </tbody>
      </table>

      <div style={{ marginTop: '1rem', fontSize: '0.9rem', textAlign: 'center' }}>
        <p>–ü–æ–∫–∞–∑–∞–Ω–æ: {data.length} —Å—Ç—Ä–æ–∫ –∏–∑ {total}</p>
        <div style={{ marginTop: '0.5rem' }}>
          <button onClick={() => setPage((p) => Math.max(1, p - 1))} disabled={page === 1}>
            ‚¨Ö –ü—Ä–µ–¥—ã–¥—É—â–∞—è
          </button>
          <span style={{ margin: '0 1rem' }}>–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}</span>
          <button onClick={() => setPage((p) => p + 1)} disabled={data.length < pageSize}>
            –°–ª–µ–¥—É—é—â–∞—è ‚û°
          </button>
        </div>
      </div>
    </div>
  )
}
