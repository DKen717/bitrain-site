import { useEffect, useState } from 'react'
import { supabase } from '../src/supabaseClient'

export default function Home() {
  const [data, setData] = useState([])
  const [fromDate, setFromDate] = useState('')
  const [toDate, setToDate] = useState('')
  const [reportTime, setReportTime] = useState('')
  const [availableTimes, setAvailableTimes] = useState([])
  const [allWagonNumbers, setAllWagonNumbers] = useState([])
  const [filteredWagonNumbers, setFilteredWagonNumbers] = useState([])

  const [page, setPage] = useState(1)
  const [total, setTotal] = useState(0)
  const pageSize = 20

  useEffect(() => {
    loadFilterOptions()
  }, [])

  useEffect(() => {
    fetchData()
  }, [fromDate, toDate, reportTime, filteredWagonNumbers, page])

  async function loadFilterOptions() {
    const { data: timeData } = await supabase
      .from('Dislocation_daily2')
      .select('–í—Ä–µ–º—è –æ—Ç—á–µ—Ç–∞')
      .order('–í—Ä–µ–º—è –æ—Ç—á–µ—Ç–∞', { ascending: true })

    const { data: wagonData } = await supabase
      .from('Dislocation_daily2')
      .select('–ù–æ–º–µ—Ä –≤–∞–≥–æ–Ω–∞')
      .order('–ù–æ–º–µ—Ä –≤–∞–≥–æ–Ω–∞', { ascending: true })

    const uniqueTimes = [...new Set((timeData || []).map((row) => row['–í—Ä–µ–º—è –æ—Ç—á–µ—Ç–∞']))]
    const uniqueWagons = [...new Set((wagonData || []).map((row) => row['–ù–æ–º–µ—Ä –≤–∞–≥–æ–Ω–∞']))]

    setAvailableTimes(uniqueTimes)
    setAllWagonNumbers(uniqueWagons)
  }

  async function fetchData() {
    let query = supabase
      .from('Dislocation_daily2')
      .select(`
        "–ù–æ–º–µ—Ä –≤–∞–≥–æ–Ω–∞",
        "–î–∞—Ç–∞ —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏",
        "–î–∞—Ç–∞ –æ—Ç—á–µ—Ç–∞",
        "–í—Ä–µ–º—è –æ—Ç—á–µ—Ç–∞",
        "–°—Ç–∞–Ω—Ü–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏",
        "–°—Ç–∞–Ω—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è",
        "–°—Ç–∞–Ω—Ü–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è"
      `, { count: 'exact' })
      .order('–î–∞—Ç–∞ –æ—Ç—á–µ—Ç–∞', { ascending: false })
      .order('–í—Ä–µ–º—è –æ—Ç—á–µ—Ç–∞', { ascending: false })

    if (fromDate) query = query.gte('–î–∞—Ç–∞ –æ—Ç—á–µ—Ç–∞', fromDate)
    if (toDate) query = query.lte('–î–∞—Ç–∞ –æ—Ç—á–µ—Ç–∞', toDate)
    if (reportTime) query = query.eq('–í—Ä–µ–º—è –æ—Ç—á–µ—Ç–∞', reportTime)
    if (filteredWagonNumbers.length > 0) {
      query = query.in('–ù–æ–º–µ—Ä –≤–∞–≥–æ–Ω–∞', filteredWagonNumbers)
    }

    const from = (page - 1) * pageSize
    const to = from + pageSize - 1

    query = query.range(from, to)

    const { data, count, error } = await query

    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', error.message)
    } else {
      setData(data)
      setTotal(count || 0)
    }
  }

  function clearFilters() {
    setFromDate('')
    setToDate('')
    setReportTime('')
    setFilteredWagonNumbers([])
    setPage(1)
  }

  return (
    <div style={{ padding: '2rem', fontFamily: 'Arial, sans-serif' }}>
      <h1>Aiway Logistic ‚Äî –æ—Ç—á–µ—Ç –ø–æ –≤–∞–≥–æ–Ω–∞–º</h1>

      <div style={{ marginBottom: '1rem' }}>
        <label style={{ marginRight: '1rem' }}>
          üìÖ –û—Ç:
          <input type="date" value={fromDate} onChange={(e) => setFromDate(e.target.value)} />
        </label>
        <label style={{ marginRight: '1rem' }}>
          –î–æ:
          <input type="date" value={toDate} onChange={(e) => setToDate(e.target.value)} />
        </label>
        <label style={{ marginRight: '1rem' }}>
          üïí –í—Ä–µ–º—è –æ—Ç—á–µ—Ç–∞:
          <select value={reportTime} onChange={(e) => setReportTime(e.target.value)}>
            <option value="">–í—Å–µ</option>
            {availableTimes.map((time, idx) => (
              <option key={idx} value={time}>{time}</option>
            ))}
          </select>
        </label>
        <button onClick={clearFilters} style={{ marginLeft: '1rem' }}>üßπ –û—á–∏—Å—Ç–∏—Ç—å</button>
      </div>

      <div style={{ marginBottom: '1rem' }}>
        üöÉ –§–∏–ª—å—Ç—Ä –ø–æ –Ω–æ–º–µ—Ä—É –≤–∞–≥–æ–Ω–∞:
        <input
          type="text"
          placeholder="—Ñ–∏–ª—å—Ç—Ä –ø–æ –Ω–æ–º–µ—Ä–∞–º"
          onChange={(e) => {
            const values = e.target.value
              .split(',')
              .map((v) => v.trim())
              .filter(Boolean)
            setFilteredWagonNumbers(values)
            setPage(1)
          }}
          style={{ marginLeft: '0.5rem', width: '250px' }}
        />
      </div>

      <table border="1" cellPadding="6" style={{ width: '100%', borderCollapse: 'collapse' }}>
        <thead style={{ backgroundColor: '#f0f0f0' }}>
          <tr>
            <th>#</th>
            <th>–î–∞—Ç–∞ –æ—Ç—á–µ—Ç–∞</th>
            <th>–í—Ä–µ–º—è</th>
            <th>–ù–æ–º–µ—Ä –≤–∞–≥–æ–Ω–∞</th>
            <th>–î–∞—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏</th>
            <th>–°—Ç–∞–Ω—Ü–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏</th>
            <th>–°—Ç–∞–Ω—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è</th>
            <th>–°—Ç–∞–Ω—Ü–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è</th>
          </tr>
        </thead>
        <tbody>
          {data.length === 0 ? (
            <tr>
              <td colSpan="8" style={{ textAlign: 'center' }}>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö</td>
            </tr>
          ) : (
            data.map((row, idx) => (
              <tr key={idx}>
                <td>{(page - 1) * pageSize + idx + 1}</td>
                <td>{row['–î–∞—Ç–∞ –æ—Ç—á–µ—Ç–∞']}</td>
                <td>{row['–í—Ä–µ–º—è –æ—Ç—á–µ—Ç–∞']}</td>
                <td>{row['–ù–æ–º–µ—Ä –≤–∞–≥–æ–Ω–∞']}</td>
                <td>{row['–î–∞—Ç–∞ —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏']}</td>
                <td>{row['–°—Ç–∞–Ω—Ü–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏']}</td>
                <td>{row['–°—Ç–∞–Ω—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è']}</td>
                <td>{row['–°—Ç–∞–Ω—Ü–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è']}</td>
              </tr>
            ))
          )}
        </tbody>
      </table>

      <div style={{ marginTop: '1rem', textAlign: 'center', fontSize: '0.9rem' }}>
        <p>–ü–æ–∫–∞–∑–∞–Ω–æ: {data.length} —Å—Ç—Ä–æ–∫ –∏–∑ {total}</p>
        <button onClick={() => setPage(Math.max(1, page - 1))} disabled={page === 1}>‚¨Ö –ü—Ä–µ–¥.</button>
        <span style={{ margin: '0 1rem' }}>–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}</span>
        <button onClick={() => setPage((p) => p + 1)} disabled={data.length < pageSize}>–°–ª–µ–¥. ‚û°</button>
      </div>
    </div>
  )
}
