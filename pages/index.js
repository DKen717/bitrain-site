import { useEffect, useState } from 'react'
import { supabase } from '../src/supabaseClient'
import dayjs from 'dayjs'
import customParseFormat from 'dayjs/plugin/customParseFormat'
dayjs.extend(customParseFormat)

import {
  Box, MenuItem, InputLabel, FormControl, Select, OutlinedInput,
  Chip, TextField, Button
} from '@mui/material'
import Autocomplete from '@mui/material/Autocomplete'

export default function Home() {
  const [data, setData] = useState([])
  const [fromDate, setFromDate] = useState('')
  const [toDate, setToDate] = useState('')
  const [reportTimes, setReportTimes] = useState([])
  const [selectedTimes, setSelectedTimes] = useState([])
  const [wagonNumbers, setWagonNumbers] = useState([])
  const [selectedWagons, setSelectedWagons] = useState([])
  const [workingStatus, setWorkingStatus] = useState('')
  const [page, setPage] = useState(1)
  const [total, setTotal] = useState(null)
  const [loading, setLoading] = useState(false)

  const pageSize = 50

  useEffect(() => {
    loadOptions()
  }, [])

  async function loadOptions() {
    try {
      const { data: timesRaw, error: errTimes } = await supabase
        .from('Dislocation_daily2')
        .select('–í—Ä–µ–º—è –æ—Ç—á–µ—Ç–∞', { distinct: true })
        .not('–í—Ä–µ–º—è –æ—Ç—á–µ—Ç–∞', 'is', null)

      const { data: wagonsRaw, error: errWagons } = await supabase
        .from('Dislocation_daily2')
        .select('–ù–æ–º–µ—Ä –≤–∞–≥–æ–Ω–∞', { distinct: true })
        .not('–ù–æ–º–µ—Ä –≤–∞–≥–æ–Ω–∞', 'is', null)

      if (errTimes || errWagons) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤:', errTimes || errWagons)
        return
      }

      const times = timesRaw.map(row => {
        const t = row['–í—Ä–µ–º—è –æ—Ç—á–µ—Ç–∞']
        if (!t) return null
        if (typeof t === 'string') return t.slice(0, 5)
        if (t instanceof Date) return t.toTimeString().slice(0, 5)
        return null
      }).filter(Boolean)

      const wagons = wagonsRaw
        .map(row => row['–ù–æ–º–µ—Ä –≤–∞–≥–æ–Ω–∞']?.toString())
        .filter(Boolean)

      setReportTimes(Array.from(new Set(times)))
      setWagonNumbers(Array.from(new Set(wagons)))
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è loadOptions:', err)
    }
  }

  function buildQuery() {
    let query = supabase
      .from('Dislocation_daily2')
      .select(`
        "–ù–æ–º–µ—Ä –≤–∞–≥–æ–Ω–∞",
        "–î–∞—Ç–∞ —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏",
        "–î–∞—Ç–∞ –æ—Ç—á–µ—Ç–∞",
        "–í—Ä–µ–º—è –æ—Ç—á–µ—Ç–∞",
        "–°—Ç–∞–Ω—Ü–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏",
        "–°—Ç–∞–Ω—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è",
        "–°—Ç–∞–Ω—Ü–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è",
        "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏",
        "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –≥—Ä—É–∑–∞",
        "–¢–∏–ø –≤–∞–≥–æ–Ω–∞",
        "–ü–æ—Ä–æ–∂–Ω–∏–π/–≥—Ä—É–∂–µ–Ω–Ω—ã–π",
        "–†–∞–±–æ—á–∏–π/–Ω–µ—Ä–∞–±–æ—á–∏–π"
      `, { count: 'exact' })

    if (fromDate) query = query.gte('–î–∞—Ç–∞ –æ—Ç—á–µ—Ç–∞', fromDate)
    if (toDate) query = query.lte('–î–∞—Ç–∞ –æ—Ç—á–µ—Ç–∞', toDate)
    if (selectedTimes.length > 0) {
      const formattedTimes = selectedTimes.map(t => `${t}:00`)
      query = query.in('–í—Ä–µ–º—è –æ—Ç—á–µ—Ç–∞', formattedTimes)
    }
    if (selectedWagons.length > 0) {
      query = query.in('–ù–æ–º–µ—Ä –≤–∞–≥–æ–Ω–∞', selectedWagons)
    }
    if (workingStatus) {
      query = query.eq('–†–∞–±–æ—á–∏–π/–Ω–µ—Ä–∞–±–æ—á–∏–π', workingStatus)
    }

    const from = (page - 1) * pageSize
    const to = from + pageSize - 1
    return query.range(from, to)
  }

  async function fetchData() {
    setLoading(true)
    try {
      const query = buildQuery()
      const { data, count, error } = await query

      if (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', error)
        setData([])
        setTotal(null)
      } else {
        setData(data)
        setTotal(count)
      }
    } finally {
      setLoading(false)
    }
  }

  function clearFilters() {
    setFromDate('')
    setToDate('')
    setSelectedTimes([])
    setSelectedWagons([])
    setWorkingStatus('')
    setPage(1)
    setData([])
    setTotal(null)
  }

  return (
    <Box sx={{ padding: '2rem', fontFamily: 'Arial' }}>
      <h1>Aiway Logistic ‚Äî –æ—Ç—á–µ—Ç</h1>

      <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: '1rem', marginBottom: '1rem' }}>
        <TextField label="–î–∞—Ç–∞ –æ—Ç" type="date" value={fromDate} onChange={(e) => setFromDate(e.target.value)} InputLabelProps={{ shrink: true }} sx={{ minWidth: 160 }} />
        <TextField label="–î–∞—Ç–∞ –¥–æ" type="date" value={toDate} onChange={(e) => setToDate(e.target.value)} InputLabelProps={{ shrink: true }} sx={{ minWidth: 160 }} />

        <FormControl sx={{ minWidth: 200 }}>
          <InputLabel>–í—Ä–µ–º—è –æ—Ç—á–µ—Ç–∞</InputLabel>
          <Select multiple value={selectedTimes} onChange={(e) => setSelectedTimes(e.target.value)} input={<OutlinedInput label="–í—Ä–µ–º—è –æ—Ç—á–µ—Ç–∞" />}
            renderValue={(selected) => (<Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>{selected.map((value) => <Chip key={value} label={value} />)}</Box>)}>
            {reportTimes.map((time) => (<MenuItem key={time} value={time}>{time}</MenuItem>))}
          </Select>
        </FormControl>

        <FormControl sx={{ minWidth: 200 }}>
          <InputLabel>–†–∞–±–æ—á–∏–π/–Ω–µ—Ä–∞–±–æ—á–∏–π</InputLabel>
          <Select value={workingStatus} onChange={(e) => setWorkingStatus(e.target.value)} input={<OutlinedInput label="–†–∞–±–æ—á–∏–π/–Ω–µ—Ä–∞–±–æ—á–∏–π" />}>
            <MenuItem value="">–í—Å–µ</MenuItem>
            <MenuItem value="–†–∞–±–æ—á–∏–π">–†–∞–±–æ—á–∏–π</MenuItem>
            <MenuItem value="–ù–µ—Ä–∞–±–æ—á–∏–π">–ù–µ—Ä–∞–±–æ—á–∏–π</MenuItem>
          </Select>
        </FormControl>

        <Autocomplete multiple options={wagonNumbers} getOptionLabel={(opt) => opt.toString()} value={selectedWagons}
          onChange={(event, newValue) => { setSelectedWagons(newValue); setPage(1) }}
          filterSelectedOptions renderInput={(params) => (<TextField {...params} label="–ù–æ–º–µ—Ä–∞ –≤–∞–≥–æ–Ω–æ–≤" placeholder="–í–≤–æ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä" />)}
          sx={{ minWidth: 300 }} />

        <Button onClick={() => { setPage(1); fetchData() }} variant="contained" color="primary" disabled={loading}>
          {loading ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : 'üîç –ü–æ–∏—Å–∫'}
        </Button>
        <Button onClick={clearFilters} variant="outlined" color="secondary">üßπ –û—á–∏—Å—Ç–∏—Ç—å</Button>
      </Box>

      {total !== null && (
        <Box sx={{ marginBottom: '1rem' }}>
          <strong>üîé –ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫: {total}</strong>
        </Box>
      )}

      <table border="1" cellPadding="6" style={{ width: '100%', borderCollapse: 'collapse' }}>
        <thead style={{ backgroundColor: '#f0f0f0' }}>
          <tr>
            <th>#</th>
            <th>–î–∞—Ç–∞ –æ—Ç—á–µ—Ç–∞</th>
            <th>–í—Ä–µ–º—è</th>
            <th>–ù–æ–º–µ—Ä –≤–∞–≥–æ–Ω–∞</th>
            <th>–î–∞—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏</th>
            <th>–û–ø–µ—Ä–∞—Ü–∏—è</th>
            <th>–°—Ç–∞–Ω—Ü–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏</th>
            <th>–°—Ç–∞–Ω—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è</th>
            <th>–°—Ç–∞–Ω—Ü–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è</th>
            <th>–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –≥—Ä—É–∑–∞</th>
            <th>–¢–∏–ø –≤–∞–≥–æ–Ω–∞</th>
            <th>–ü–æ—Ä–æ–∂–Ω–∏–π/–≥—Ä—É–∂–µ–Ω–Ω—ã–π</th>
            <th>–†–∞–±–æ—á–∏–π/–Ω–µ—Ä–∞–±–æ—á–∏–π</th>
          </tr>
        </thead>
        <tbody>
          {data.length === 0 ? (
            <tr><td colSpan="13" style={{ textAlign: 'center' }}>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö</td></tr>
          ) : (
            data.map((row, idx) => (
              <tr key={idx}>
                <td>{(page - 1) * pageSize + idx + 1}</td>
                <td>{row['–î–∞—Ç–∞ –æ—Ç—á–µ—Ç–∞'] ? dayjs(row['–î–∞—Ç–∞ –æ—Ç—á–µ—Ç–∞']).format('DD.MM.YYYY') : ''}</td>
                <td>{row['–í—Ä–µ–º—è –æ—Ç—á–µ—Ç–∞']}</td>
                <td>{row['–ù–æ–º–µ—Ä –≤–∞–≥–æ–Ω–∞']}</td>
                <td>{row['–î–∞—Ç–∞ —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏']}</td>
                <td>{row['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏']}</td>
                <td>{row['–°—Ç–∞–Ω—Ü–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏']}</td>
                <td>{row['–°—Ç–∞–Ω—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è']}</td>
                <td>{row['–°—Ç–∞–Ω—Ü–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è']}</td>
                <td>{row['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –≥—Ä—É–∑–∞']}</td>
                <td>{row['–¢–∏–ø –≤–∞–≥–æ–Ω–∞']}</td>
                <td>{row['–ü–æ—Ä–æ–∂–Ω–∏–π/–≥—Ä—É–∂–µ–Ω–Ω—ã–π']}</td>
                <td>{row['–†–∞–±–æ—á–∏–π/–Ω–µ—Ä–∞–±–æ—á–∏–π']}</td>
              </tr>
            ))
          )}
        </tbody>
      </table>

      {total !== null && (
        <Box sx={{ marginTop: '1rem', textAlign: 'center', fontSize: '0.9rem' }}>
          <button onClick={() => setPage(p => Math.max(1, p - 1))} disabled={page === 1}>‚¨Ö –ü—Ä–µ–¥.</button>
          <span style={{ margin: '0 1rem' }}>–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}</span>
          <button onClick={() => setPage(p => p + 1)} disabled={(page * pageSize) >= total}>–°–ª–µ–¥. ‚û°</button>
        </Box>
      )}
    </Box>
  )
}
